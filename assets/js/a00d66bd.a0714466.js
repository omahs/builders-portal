"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[3315],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,g=m["".concat(l,".").concat(u)]||m[u]||p[u]||r;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8344:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(3117),o=n(102),r=(n(7294),n(3905)),i=["components"],s={},l="@aragon/sdk-client",c={unversionedId:"sdk/client",id:"sdk/client",title:"@aragon/sdk-client",description:"@aragon/sdk-client contains the high level operations for interacting with the Aragon ecosystem",source:"@site/docs/sdk/client.md",sourceDirName:"sdk",slug:"/sdk/client",permalink:"/docs/sdk/client",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sdk/client.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Aragon SDK",permalink:"/docs/sdk/"},next:{title:"Aragon Core contracts",permalink:"/docs/smart-contracts/"}},d={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"DAO Creation",id:"dao-creation",level:4},{value:"DAO ERC20 Voting",id:"dao-erc20-voting",level:6},{value:"DAO Whitelist Voting",id:"dao-whitelist-voting",level:6},{value:"Proposal Creation",id:"proposal-creation",level:4},{value:"ERC20 Voting Proposal",id:"erc20-voting-proposal",level:6},{value:"Whitelist Voting Proposal",id:"whitelist-voting-proposal",level:6},{value:"Testing",id:"testing",level:2}],m={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"aragonsdk-client"},"@aragon/sdk-client"),(0,r.kt)("p",null,"@aragon/sdk-client contains the high level operations for interacting with the Aragon ecosystem"),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Use ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/"},"npm")," or ",(0,r.kt)("a",{parentName:"p",href:"https://yarnpkg.com/"},"yarn")," to install @aragon/sdk-client."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @aragon/sdk-client\nyarn add @aragon/sdk-client\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h4",{id:"dao-creation"},"DAO Creation"),(0,r.kt)("h6",{id:"dao-erc20-voting"},"DAO ERC20 Voting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// For local testing\nconst contextParams: ContextParams = {\n    network: 31337,\n    signer: new Wallet("privateKey"),\n    daoFactoryAddress: "daoFactoryAddress",\n    web3Providers: ["http://localhost:8545"],\n};\nconst context = new Context(contextParams);\n\nconst client = new ClientDaoERC20Voting(context);\n\nconst daoCreationParams: ICreateDaoERC20Voting = {\n    daoConfig: {\n        name: "ERC20VotingDAO_" + Math.floor(Math.random() * 9999) + 1,\n        metadata: "0x1234",\n    },\n    tokenConfig: {\n        address: "0x0000000000000000000000000000000000000000",\n        name:\n            "TestToken" +\n            (Math.random() + 1)\n                .toString(36)\n                .substring(4)\n                .toUpperCase(),\n        symbol:\n            "TEST" +\n            (Math.random() + 1)\n                .toString(36)\n                .substring(4)\n                .toUpperCase(),\n    },\n    mintConfig: [\n        {\n            address: Wallet.createRandom().address,\n            balance: BigInt(Math.floor(Math.random() * 9999) + 1),\n        },\n        {\n            address: Wallet.createRandom().address,\n            balance: BigInt(Math.floor(Math.random() * 9999) + 1),\n        },\n    ],\n    votingConfig: {\n        minSupport: Math.floor(Math.random() * 100) + 1,\n        minParticipation: Math.floor(Math.random() * 100) + 1,\n        minDuration: Math.floor(Math.random() * 9999) + 1,\n    },\n    gsnForwarder: Wallet.createRandom().address,\n};\n\nconst gasFeesEstimation = await client.estimate.create(daoCreationParams);\nconsole.log(gasFeesEstimation)\n// {\n//   average: BigNumber { _hex: \'0x0a509a23250504\', _isBigNumber: true }, // Average gas fee estimation (reducing the max value by heuristic) \n//   max: BigNumber { _hex: \'0x1080f69ea1a1fc\', _isBigNumber: true } // Maximum gas fee estimation\n// }\n\nconst newDaoAddress = await client.dao.create(daoCreationParams);\nconsole.log(newDaoAddress) // New DAO address\n')),(0,r.kt)("h6",{id:"dao-whitelist-voting"},"DAO Whitelist Voting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// For local testing\nconst contextParams: ContextParams = {\n    network: 31337,\n    signer: new Wallet("privateKey"),\n    daoFactoryAddress: "daoFactoryAddress",\n    web3Providers: ["http://localhost:8545"],\n};\nconst context = new Context(contextParams);\n\nconst client = new ClientDaoWhitelistVoting(context);\n\nconst daoCreationParams: ICreateDaoWhitelistVoting = {\n    daoConfig: {\n        name: "WhitelistVotingDAO_" + Math.floor(Math.random() * 9999) + 1,\n        metadata: "0x1234",\n    },\n    votingConfig: {\n        minSupport: Math.floor(Math.random() * 100) + 1,\n        minParticipation: Math.floor(Math.random() * 100) + 1,\n        minDuration: Math.floor(Math.random() * 9999) + 1,\n    },\n    whitelistVoters: [\n        Wallet.createRandom().address,\n        Wallet.createRandom().address,\n    ],\n    gsnForwarder: Wallet.createRandom().address,\n};\n\nconst gasFeesEstimation = await client.estimate.create(daoCreationParams);\n// {\n//   average: BigNumber { _hex: \'0x0a509a23250504\', _isBigNumber: true }, // Average gas fee estimation (reducing the max value by heuristic) \n//   max: BigNumber { _hex: \'0x1080f69ea1a1fc\', _isBigNumber: true } // Maximum gas fee estimation\n// }\n\nconst newDaoAddress = await client.dao.create(daoCreationParams);\nconsole.log(newDaoAddress) // New DAO address\n')),(0,r.kt)("h4",{id:"proposal-creation"},"Proposal Creation"),(0,r.kt)("h6",{id:"erc20-voting-proposal"},"ERC20 Voting Proposal"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// For local testing\nconst contextParams: ContextParams = {\n    network: 31337,\n    signer: new Wallet("privateKey"),\n    daoFactoryAddress: "daoFactoryAddress",\n    web3Providers: ["http://localhost:8545"],\n};\nconst context = new Context(contextParams);\n\nconst client = new ClientDaoERC20Voting(context);\n\nconst proposalCreationParams: ICreateProposal = {\n    metadata: "0x1234", // IPFS CID\n    executeIfDecided: true,\n    creatorChoice: VoteOption.YEA,\n};\n\nconst newProposalId = await client.dao.simpleVote.createProposal(\n    "votingAddress",\n    proposalCreationParams\n);\nconsole.log(newProposalId) // New proposal id\n')),(0,r.kt)("h6",{id:"whitelist-voting-proposal"},"Whitelist Voting Proposal"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'// For local testing\nconst contextParams: ContextParams = {\n    network: 31337,\n    signer: new Wallet("privateKey"),\n    daoFactoryAddress: "daoFactoryAddress",\n    web3Providers: ["http://localhost:8545"],\n};\nconst context = new Context(contextParams);\n\nconst client = new ClientDaoWhitelistVoting(context);\n\nconst proposalCreationParams: ICreateProposal = {\n    metadata: "0x1234",\n    executeIfDecided: true,\n    creatorChoice: VoteOption.YEA,\n};\n\nconst newProposalId = await client.dao.whitelist.createProposal(\n    "votingAddress",\n    proposalCreationParams\n);\nconsole.log(newProposalId) // New proposal id\n')),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("p",null,"To execute library tests just run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test\n")))}u.isMDXComponent=!0}}]);