"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[3708],{3905:function(t,e,a){a.d(e,{Zo:function(){return m},kt:function(){return c}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var d=n.createContext({}),p=function(t){var e=n.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},m=function(t){var e=p(t.components);return n.createElement(d.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,d=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),k=p(a),c=r,s=k["".concat(d,".").concat(c)]||k[c]||u[c]||l;return a?n.createElement(s,i(i({ref:e},m),{},{components:a})):n.createElement(s,i({ref:e},m))}));function c(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},2075:function(t,e,a){a.r(e),a.d(e,{assets:function(){return m},contentTitle:function(){return d},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var n=a(3117),r=a(102),l=(a(7294),a(3905)),i=["components"],o={},d=void 0,p={unversionedId:"smart-contracts/tokens/MerkleDistributor",id:"smart-contracts/tokens/MerkleDistributor",title:"MerkleDistributor",description:"Aragon Core",source:"@site/docs/smart-contracts/tokens/MerkleDistributor.md",sourceDirName:"smart-contracts/tokens",slug:"/smart-contracts/tokens/MerkleDistributor",permalink:"/docs/smart-contracts/tokens/MerkleDistributor",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/smart-contracts/tokens/MerkleDistributor.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IERC20MintableUpgradeable",permalink:"/docs/smart-contracts/tokens/IERC20MintableUpgradeable"},next:{title:"MerkleMinter",permalink:"/docs/smart-contracts/tokens/MerkleMinter"}},m={},u=[{value:"Aragon Core",id:"aragon-core",level:2},{value:"contract <code>MerkleDistributor</code>",id:"contract-merkledistributor",level:3},{value:"internal variable <code>MERKLE_DISTRIBUTOR_INTERFACE_ID</code>",id:"internal-variable-merkle_distributor_interface_id",level:4},{value:"public variable <code>token</code>",id:"public-variable-token",level:4},{value:"public variable <code>merkleRoot</code>",id:"public-variable-merkleroot",level:4},{value:"private variable <code>claimedBitMap</code>",id:"private-variable-claimedbitmap",level:4},{value:"error <code>TokenAlreadyClaimed</code>",id:"error-tokenalreadyclaimed",level:4},{value:"error <code>TokenClaimInvalid</code>",id:"error-tokenclaiminvalid",level:4},{value:"event <code>Claimed</code>",id:"event-claimed",level:4},{value:"external function <code>initialize</code>",id:"external-function-initialize",level:4},{value:"external function <code>versionRecipient</code>",id:"external-function-versionrecipient",level:4},{value:"external function <code>claim</code>",id:"external-function-claim",level:4},{value:"public function <code>unclaimedBalance</code>",id:"public-function-unclaimedbalance",level:4},{value:"internal function <code>_verifyBalanceOnTree</code>",id:"internal-function-_verifybalanceontree",level:4},{value:"public function <code>isClaimed</code>",id:"public-function-isclaimed",level:4},{value:"private function <code>_setClaimed</code>",id:"private-function-_setclaimed",level:4}],k={toc:u};function c(t){var e=t.components,a=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"aragon-core"},"Aragon Core"),(0,l.kt)("h3",{id:"contract-merkledistributor"},"contract ",(0,l.kt)("inlineCode",{parentName:"h3"},"MerkleDistributor")),(0,l.kt)("p",null,"A component distributing claimable ",(0,l.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20")," tokens via a merkle tree."),(0,l.kt)("h4",{id:"internal-variable-merkle_distributor_interface_id"},"internal variable ",(0,l.kt)("inlineCode",{parentName:"h4"},"MERKLE_DISTRIBUTOR_INTERFACE_ID")),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-165"},"ERC-165")," interface ID of the contract"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes4 MERKLE_DISTRIBUTOR_INTERFACE_ID \n")),(0,l.kt)("h4",{id:"public-variable-token"},"public variable ",(0,l.kt)("inlineCode",{parentName:"h4"},"token")),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20")," token to be distributed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"contract IERC20Upgradeable token \n")),(0,l.kt)("h4",{id:"public-variable-merkleroot"},"public variable ",(0,l.kt)("inlineCode",{parentName:"h4"},"merkleRoot")),(0,l.kt)("p",null,"The merkle root of the balance tree storing the claims."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes32 merkleRoot \n")),(0,l.kt)("h4",{id:"private-variable-claimedbitmap"},"private variable ",(0,l.kt)("inlineCode",{parentName:"h4"},"claimedBitMap")),(0,l.kt)("p",null,"A packed array of booleans containing the information who claimed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"mapping(uint256 => uint256) claimedBitMap \n")),(0,l.kt)("h4",{id:"error-tokenalreadyclaimed"},"error ",(0,l.kt)("inlineCode",{parentName:"h4"},"TokenAlreadyClaimed")),(0,l.kt)("p",null,"Thrown if tokens have been already claimed from the distributor."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"error TokenAlreadyClaimed(uint256 index) \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The index in the balance tree that was claimed.")))),(0,l.kt)("h4",{id:"error-tokenclaiminvalid"},"error ",(0,l.kt)("inlineCode",{parentName:"h4"},"TokenClaimInvalid")),(0,l.kt)("p",null,"Thrown if a claim is invalid."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"error TokenClaimInvalid(uint256 index, address to, uint256 amount) \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The index in the balance tree to be claimed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"to"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address to which the tokens should be sent.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"amount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount to be claimed.")))),(0,l.kt)("h4",{id:"event-claimed"},"event ",(0,l.kt)("inlineCode",{parentName:"h4"},"Claimed")),(0,l.kt)("p",null,"Emitted when tokens are claimed from the distributor."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event Claimed(uint256 index, address to, uint256 amount) \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"index"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The index in the balance tree that was claimed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"to"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address to which the tokens are send.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"amount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The claimed amount.")))),(0,l.kt)("h4",{id:"external-function-initialize"},"external function ",(0,l.kt)("inlineCode",{parentName:"h4"},"initialize")),(0,l.kt)("p",null,"Initializes the component."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize(contract IDAO _dao, address _trustedForwarder, contract IERC20Upgradeable _token, bytes32 _merkleRoot) external \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_dao"),(0,l.kt)("td",{parentName:"tr",align:null},"contract IDAO"),(0,l.kt)("td",{parentName:"tr",align:null},"The IDAO interface of the associated DAO.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_trustedForwarder"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address of the trusted forwarder required for meta transactions.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_token"),(0,l.kt)("td",{parentName:"tr",align:null},"contract IERC20Upgradeable"),(0,l.kt)("td",{parentName:"tr",align:null},"A mintable ",(0,l.kt)("a",{parentName:"td",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20")," token.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_merkleRoot"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"The merkle root of the balance tree.")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This method is required to support ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-1822"},"ERC-1822"),".")),(0,l.kt)("h4",{id:"external-function-versionrecipient"},"external function ",(0,l.kt)("inlineCode",{parentName:"h4"},"versionRecipient")),(0,l.kt)("p",null,"Returns the version of the GSN relay recipient."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function versionRecipient() external view virtual returns (string) \n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Describes the version and contract for GSN compatibility.")),(0,l.kt)("h4",{id:"external-function-claim"},"external function ",(0,l.kt)("inlineCode",{parentName:"h4"},"claim")),(0,l.kt)("p",null,"Claims tokens from the balance tree and sends it to an address."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function claim(uint256 _index, address _to, uint256 _amount, bytes32[] _proof) external \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_index"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The index in the balance tree to be claimed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_to"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The receiving address.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_amount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of tokens.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_proof"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"The merkle proof to be verified.")))),(0,l.kt)("h4",{id:"public-function-unclaimedbalance"},"public function ",(0,l.kt)("inlineCode",{parentName:"h4"},"unclaimedBalance")),(0,l.kt)("p",null,"Returns the amount of unclaimed tokens."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function unclaimedBalance(uint256 _index, address _to, uint256 _amount, bytes32[] _proof) public view returns (uint256) \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_index"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The index in the balance tree to be claimed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_to"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The receiving address.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_amount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of tokens.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_proof"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"The merkle proof to be verified.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"Output")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The unclaimed amount.")))),(0,l.kt)("h4",{id:"internal-function-_verifybalanceontree"},"internal function ",(0,l.kt)("inlineCode",{parentName:"h4"},"_verifyBalanceOnTree")),(0,l.kt)("p",null,"Verifies a balance on a merkle tree."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _verifyBalanceOnTree(uint256 _index, address _to, uint256 _amount, bytes32[] _proof) internal view returns (bool) \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_index"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The index in the balance tree to be claimed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_to"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The receiving address.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_amount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of tokens.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_proof"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32[]"),(0,l.kt)("td",{parentName:"tr",align:null},"The merkle proof to be verified.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"Output")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"True if the given proof is correct.")))),(0,l.kt)("h4",{id:"public-function-isclaimed"},"public function ",(0,l.kt)("inlineCode",{parentName:"h4"},"isClaimed")),(0,l.kt)("p",null,"Checks if an index on the merkle tree is claimed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function isClaimed(uint256 _index) public view returns (bool) \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_index"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The index in the balance tree to be claimed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"Output")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"[0]"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"True if the index is claimed.")))),(0,l.kt)("h4",{id:"private-function-_setclaimed"},"private function ",(0,l.kt)("inlineCode",{parentName:"h4"},"_setClaimed")),(0,l.kt)("p",null,"Sets an index in the merkle tree to be claimed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function _setClaimed(uint256 _index) private \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_index"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The index in the balance tree to be claimed.")))))}c.isMDXComponent=!0}}]);