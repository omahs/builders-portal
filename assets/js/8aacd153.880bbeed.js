"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[7631],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return s}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),d=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=d(r),s=a,k=m["".concat(p,".").concat(s)]||m[s]||c[s]||l;return r?n.createElement(k,i(i({ref:t},u),{},{components:r})):n.createElement(k,i({ref:t},u))}));function s(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var d=2;d<l;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6052:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return s},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return c}});var n=r(3117),a=r(102),l=(r(7294),r(3905)),i=["components"],o={},p=void 0,d={unversionedId:"smart-contracts/tokens/MerkleMinter",id:"smart-contracts/tokens/MerkleMinter",title:"MerkleMinter",description:"Aragon Core",source:"@site/docs/smart-contracts/tokens/MerkleMinter.md",sourceDirName:"smart-contracts/tokens",slug:"/smart-contracts/tokens/MerkleMinter",permalink:"/docs/smart-contracts/tokens/MerkleMinter",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/smart-contracts/tokens/MerkleMinter.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MerkleDistributor",permalink:"/docs/smart-contracts/tokens/MerkleDistributor"},next:{title:"Proxy",permalink:"/docs/smart-contracts/utils/Proxy"}},u={},c=[{value:"Aragon Core",id:"aragon-core",level:2},{value:"contract <code>MerkleMinter</code>",id:"contract-merkleminter",level:3},{value:"internal variable <code>MERKLE_MINTER_INTERFACE_ID</code>",id:"internal-variable-merkle_minter_interface_id",level:4},{value:"public variable <code>MERKLE_MINT_PERMISSION_ID</code>",id:"public-variable-merkle_mint_permission_id",level:4},{value:"public variable <code>token</code>",id:"public-variable-token",level:4},{value:"public variable <code>distributorBase</code>",id:"public-variable-distributorbase",level:4},{value:"event <code>MerkleMinted</code>",id:"event-merkleminted",level:4},{value:"external function <code>initialize</code>",id:"external-function-initialize",level:4},{value:"external function <code>versionRecipient</code>",id:"external-function-versionrecipient",level:4},{value:"external function <code>merkleMint</code>",id:"external-function-merklemint",level:4}],m={toc:c};function s(e){var t=e.components,r=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"aragon-core"},"Aragon Core"),(0,l.kt)("h3",{id:"contract-merkleminter"},"contract ",(0,l.kt)("inlineCode",{parentName:"h3"},"MerkleMinter")),(0,l.kt)("p",null,"A component minting ",(0,l.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20")," tokens and distributing them on merkle trees using ",(0,l.kt)("inlineCode",{parentName:"p"},"MerkleDistributor")," clones."),(0,l.kt)("h4",{id:"internal-variable-merkle_minter_interface_id"},"internal variable ",(0,l.kt)("inlineCode",{parentName:"h4"},"MERKLE_MINTER_INTERFACE_ID")),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-165"},"ERC-165")," interface ID of the contract."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes4 MERKLE_MINTER_INTERFACE_ID \n")),(0,l.kt)("h4",{id:"public-variable-merkle_mint_permission_id"},"public variable ",(0,l.kt)("inlineCode",{parentName:"h4"},"MERKLE_MINT_PERMISSION_ID")),(0,l.kt)("p",null,"The ID of the permission required to call the ",(0,l.kt)("inlineCode",{parentName:"p"},"merkleMint")," function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"bytes32 MERKLE_MINT_PERMISSION_ID \n")),(0,l.kt)("h4",{id:"public-variable-token"},"public variable ",(0,l.kt)("inlineCode",{parentName:"h4"},"token")),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20")," token to be distributed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"contract IERC20MintableUpgradeable token \n")),(0,l.kt)("h4",{id:"public-variable-distributorbase"},"public variable ",(0,l.kt)("inlineCode",{parentName:"h4"},"distributorBase")),(0,l.kt)("p",null,"The address of the ",(0,l.kt)("inlineCode",{parentName:"p"},"MerkleDistributor")," to clone from."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"address distributorBase \n")),(0,l.kt)("h4",{id:"event-merkleminted"},"event ",(0,l.kt)("inlineCode",{parentName:"h4"},"MerkleMinted")),(0,l.kt)("p",null,"Emitted when a token is minted."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"event MerkleMinted(address distributor, bytes32 merkleRoot, uint256 totalAmount, bytes tree, bytes context) \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"distributor"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The ",(0,l.kt)("inlineCode",{parentName:"td"},"MerkleDistributor")," address via which the tokens can be claimed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"merkleRoot"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"The root of the merkle balance tree.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"totalAmount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The total amount of tokens that were minted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"tree"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"The link to the stored merkle tree.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"context"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Additional info related to the minting process.")))),(0,l.kt)("h4",{id:"external-function-initialize"},"external function ",(0,l.kt)("inlineCode",{parentName:"h4"},"initialize")),(0,l.kt)("p",null,"Initializes the component."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function initialize(contract IDAO _dao, address _trustedForwarder, contract IERC20MintableUpgradeable _token, contract MerkleDistributor _distributorBase) external \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_dao"),(0,l.kt)("td",{parentName:"tr",align:null},"contract IDAO"),(0,l.kt)("td",{parentName:"tr",align:null},"The IDAO interface of the associated DAO.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_trustedForwarder"),(0,l.kt)("td",{parentName:"tr",align:null},"address"),(0,l.kt)("td",{parentName:"tr",align:null},"The address of the trusted forwarder required for meta transactions.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_token"),(0,l.kt)("td",{parentName:"tr",align:null},"contract IERC20MintableUpgradeable"),(0,l.kt)("td",{parentName:"tr",align:null},"A mintable ",(0,l.kt)("a",{parentName:"td",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20")," token.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_distributorBase"),(0,l.kt)("td",{parentName:"tr",align:null},"contract MerkleDistributor"),(0,l.kt)("td",{parentName:"tr",align:null},"A ",(0,l.kt)("inlineCode",{parentName:"td"},"MerkleDistributor")," to be cloned.")))),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"This method is required to support ",(0,l.kt)("a",{parentName:"em",href:"https://eips.ethereum.org/EIPS/eip-1822"},"ERC-1822"),".")),(0,l.kt)("h4",{id:"external-function-versionrecipient"},"external function ",(0,l.kt)("inlineCode",{parentName:"h4"},"versionRecipient")),(0,l.kt)("p",null,"Returns the version of the GSN relay recipient."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function versionRecipient() external view virtual returns (string) \n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Describes the version and contract for GSN compatibility.")),(0,l.kt)("h4",{id:"external-function-merklemint"},"external function ",(0,l.kt)("inlineCode",{parentName:"h4"},"merkleMint")),(0,l.kt)("p",null,"Mints ",(0,l.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC-20")," tokens and distributes them using a ",(0,l.kt)("inlineCode",{parentName:"p"},"MerkleDistributor"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-solidity"},"function merkleMint(bytes32 _merkleRoot, uint256 _totalAmount, bytes _tree, bytes _context) external returns (contract MerkleDistributor distributor) \n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_merkleRoot"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes32"),(0,l.kt)("td",{parentName:"tr",align:null},"The root of the merkle balance tree.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_totalAmount"),(0,l.kt)("td",{parentName:"tr",align:null},"uint256"),(0,l.kt)("td",{parentName:"tr",align:null},"The total amount of tokens to be minted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_tree"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"The link to the stored merkle tree.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"_context"),(0,l.kt)("td",{parentName:"tr",align:null},"bytes"),(0,l.kt)("td",{parentName:"tr",align:null},"Additional info related to the minting process.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("strong",{parentName:"td"},"Output")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"distributor"),(0,l.kt)("td",{parentName:"tr",align:null},"contract MerkleDistributor"),(0,l.kt)("td",{parentName:"tr",align:null},"The ",(0,l.kt)("inlineCode",{parentName:"td"},"MerkleDistributor")," via which the tokens can be claimed.")))))}s.isMDXComponent=!0}}]);